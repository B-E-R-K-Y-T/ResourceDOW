<html>

<head>
  <title>
    FDA & AIFC Specs [RUS]
  </title>
  <meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
</head>

<body bgcolor="#FFFFFF">
  <font face="Arial" size=3>
  <div align="justify">

  <div align="right">
    Дата: 20 октября 2005 г.<br>
    Автор: jTommy (jTommy@zmail.ru)<br><br>
  </div>

  <font size=5><div align="center"><strong>
    Спецификация формата файлов FDA<br>
    (Fourier/Fast Digital Audio)
  </strong></div></font>

  <br>Для описания структур данных я буду использовать синтаксис языка С.
  Используемые типы данных:<br>
  <table width="500" border="1">
    <tr>
      <td>CHAR</td>
      <td>8-битовое целое со знаком, 1-байтовый символ</td>
    </tr>
    <tr>
      <td>BYTE</td>
      <td>8-битовое целое без знака</td>
    </tr>
    <tr>
      <td>INT</td>
      <td>16-битовое целое со знаком</td>
    </tr>
    <tr>
      <td>UINT</td>
      <td>16-битовое целое без знака</td>
    </tr>
    <tr>
      <td>LONG</td>
      <td>32-битовое целое со знаком</td>
    </tr>
    <tr>
      <td>ULONG</td>
      <td>32-битовое целое без знака</td>
    </tr>
    <tr>
      <td>PSTRING</td>
      <td>Строка фиксированной длины (Pascal-строка)</td>
    </tr>
  </table>

  <div align="center"><font size=4><strong><br>
    Общие сведения<br>
  </strong></font></div>
  Порядок байтов в 16- и 32-битных числах "младший в младшем" т.е. нормальный для
  систем x86.<br>
  Данные в файле организованы в виде порций. Порция – это независимая структура
  данных, содержащая заголовок и (не обязательно) блок данных. Порции не имеют
  фиксированных позиций в файле и читаются последовательно. В блоке данных порция
  может содержать структуру данных, поток данных или другие порции.

  <div align="center"><font size=4><strong><br>
    Структура файла<br>
  </strong></font></div>
  <table width="300" border="1">
    <tr>
      <td width="33%">FDAHeader</td>
      <td width="67%">Заголовок файла</td>
    </tr>
    <tr>
      <td>FBIF</td>
      <td>Порция File Burn Info</td>
    </tr>
    <tr>
      <td>FDA_</td>
      <td>Порция-контейнер FDA</td>
    </tr>
    <tr>
      <td><div align="center">INFO</div></td>
      <td>Порция INFO</td>
    </tr>
    <tr>
      <td><div align="center">DATA</div></td>
      <td>Порция DATA</td>
    </tr>
  </table>

  <div align="center"><font size=4><strong><br>
    Заголовок файла<br>
  </strong></font></div>
  Заголовок файла содержит идентификатор и версию файла.<br>
  <code><br>
    typedef struct TFDAHeader {<br>
    &nbsp;&nbsp;CHAR Signature[12]; // Идентификатор файла (всегда "Relic Chunky")<br>
    &nbsp;&nbsp;CHAR SignServ[4]; &nbsp; // (всегда 0x0d0a1a00)<br>
    &nbsp;&nbsp;ULONG MajorVer; &nbsp;&nbsp;&nbsp; // Возможно, старший номер версии (всегда 0x01)<br>
    &nbsp;&nbsp;ULONG MinorVer; &nbsp;&nbsp;&nbsp; // Возможно, младший номер версии (всегда 0x01)<br>
    } FDAHeader;<br><br>
  </code>
  Поле SignServ останавливает вывод файла на экран в командной строке (команда "type”).

  <div align="center"><font size=4><strong><br>
    Порции данных<br>
  </strong></font></div>
  FDA файл всегда содержит следующие порции: FBIF, FDA_, INFO, DATA. Порядок
  порций не меняется. Но, возможно, в будущем будут добавлены новые порции.
  Каждая порция начинается с заголовка:
  <code><br><br>
    typedef struct TChunkHeader {<br>
    &nbsp;&nbsp;CHAR ChunkType[4]; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Тип порции<br>
    &nbsp;&nbsp;CHAR ChunkID[4]; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Идентификатор порции<br>
    &nbsp;&nbsp;ULONG ChunkVer; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Версия порции<br>
    &nbsp;&nbsp;ULONG ChunkSize; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Размер данных в порции, в байтах<br>
    &nbsp;&nbsp;ULONG lenChunkName; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Длина строки ChunkName<br>
    &nbsp;&nbsp;CHAR ChunkName[lenChunkName]; // Имя порции<br>
    } ChunkHeader;<br><br>
  </code>
  Поле ChunkType определяет тип порции: "DATA" - порция содержит данные
  (структуру и/или поток); "FOLD" - порция-контейнер, содержит субпорции.
  В этом случае в поле ChunkSize записывается сумма размеров всех субпорций.

  <strong><br><br>
    Порция FBIF (File Burn Info)
  </strong><br>
  Порция содержит информацию о создании FDA файла. Во всех файлах “Relic Chunky”
  эта порция всегда записана сразу после заголовка.<br>
  <code><br>
    typedef struct TFBIFChunk {<br>
    &nbsp;&nbsp;ULONG lenPluginName; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Длина строки PluginName (всегда 0x0a)<br>
    &nbsp;&nbsp;CHAR PluginName[lenPluginName]; // Имя плагина (всегда "RAW to FDA")<br>
    &nbsp;&nbsp;ULONG PluginVer; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Версия плагина (всегда 0x01)<br>
    &nbsp;&nbsp;ULONG lenUserName; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Длина строки UserName<br>
    &nbsp;&nbsp;CHAR UserName[lenUserName]; &nbsp;&nbsp;&nbsp; // Имя пользователя в ОС<br>
    &nbsp;&nbsp;ULONG lenBurnTime; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Длина строки BurnTime<br>
    &nbsp;&nbsp;CHAR BurnTime[lenBurnTime]; &nbsp;&nbsp;&nbsp; // Дата и время создания файла<br>
    } FBIFChunk;<br><br>
  </code>
  Поле PluginName определяет имя плагина, который использовался при создании
  файла (или умеет работать с данными, записанными в файле).<br>
  В поле BurnTime дата и время записываются в следующем формате: "[Month]
  [dd], [yyyy], [h]:[mm]:[ss] [AM/PM]". Например: "August 08, 2004,
  5:36:59 PM".<br>
  Поля заголовка порции всегда равны следующим значениям:<br>
  <code>
    &nbsp;&nbsp;ChunkType &nbsp;&nbsp; = "DATA"<br>
    &nbsp;&nbsp;ChunkID &nbsp;&nbsp;&nbsp;&nbsp; = "FBIF"<br>
    &nbsp;&nbsp;ChunkVer &nbsp;&nbsp;&nbsp; = 0x01<br>
    &nbsp;&nbsp;lenChunkName = 0x0d<br>
    &nbsp;&nbsp;ChunkName &nbsp;&nbsp; = "FileBurnInfo"\0
  </code>

  <strong><br><br>
    Порция FDA_<br>
  </strong>
  Это порция-контейнер. Содержит две субпорции: INFO и DATA. По идентификатору
  этой порции определяется тип данных, записанных в порции DATA.<br>
  <code><br>
    typedef struct TFDA_Chunk {<br>
    } FDA_Chunk;<br><br>
  </code>
  Поля заголовка порции всегда равны следующим значениям:<br>
  <code>
    &nbsp;&nbsp;ChunkType &nbsp;&nbsp; = "FOLD"<br>
    &nbsp;&nbsp;ChunkID &nbsp;&nbsp;&nbsp;&nbsp; = "FDA "<br>
    &nbsp;&nbsp;ChunkVer &nbsp;&nbsp;&nbsp; = 0x01<br>
    &nbsp;&nbsp;lenChunkName = 0x00<br>
    &nbsp;&nbsp;ChunkName &nbsp;&nbsp; = ""<br>
  </code>

  <strong><br>
    Порция INFO<br>
  </strong>
  Порция содержит информацию о данных, записанных в порции DATA.
  <code><br><br>
    typedef struct TINFOChunk {<br>
    &nbsp;&nbsp;ULONG Channels; &nbsp;&nbsp;&nbsp; // Количество каналов (1 - моно, 2 - стерео и т.д.)<br>
    &nbsp;&nbsp;ULONG SampleSize; &nbsp; // Размер семпла в битах<br>
    &nbsp;&nbsp;ULONG BlockBitrate; // Размер фрейма в битах<br>
    &nbsp;&nbsp;ULONG SampleRate; &nbsp; // Частота дискретизации в герцах<br>
    &nbsp;&nbsp;ULONG BeginLoop; &nbsp;&nbsp; // Начало цикла (всегда 0x00)<br>
    &nbsp;&nbsp;ULONG EndLoop; &nbsp;&nbsp;&nbsp;&nbsp; // Конец цикла (всегда 0xffffffff)<br>
    &nbsp;&nbsp;ULONG StartOffset;&nbsp; // Начальное смещение цикла (всегда 0x00)<br>
    } INFOChunk;<br><br>
  </code>
  Поле BlockBitrate определяет размер фрейма в битах. Стандартные значения 256,
  512, 1024 и 2048 эти значения соответствуют следующим битрейтам (для одного
  канала): 22.05kbps, 44.1kbps – низкое качество, 88.2kbps – среднее качество
  и 176.4kbps – высокое качество.<br>
  Поля BeginLoop, EndLoop и StartOffset содержат значения для проигрывания звука
  в цикле. При указанных выше значениях цикл не используется.<br>
  Поля заголовка порции всегда равны следующим значениям:<br>
  <code>
    &nbsp;&nbsp;ChunkType &nbsp;&nbsp; = "DATA"<br>
    &nbsp;&nbsp;ChunkID &nbsp;&nbsp;&nbsp;&nbsp; = "INFO"<br>
    &nbsp;&nbsp;ChunkVer &nbsp;&nbsp;&nbsp; = 0x01<br>
    &nbsp;&nbsp;ChunkSize &nbsp;&nbsp; = 0x1c<br>
    &nbsp;&nbsp;lenChunkName = 0x00<br>
    &nbsp;&nbsp;ChunkName &nbsp;&nbsp; = ""<br>
  </code>

  <strong><br>
    Порция DATA<br>
  </strong>
  Порция содержит аудио данные (поток). Аудио данные сжаты алгоритмом с потерями,
  собственной разработки Relic. Cжатые данные разделены на фреймы. Размер фрейма
  постоянен и задается полем BlockBitrate порции INFO.<br>
  <code><br>
    typedef struct TDATAChunk {<br>
    &nbsp;&nbsp;ULONG DataSize; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Размер сжатых звуковых данных<br>
    &nbsp;&nbsp;BYTE SoundData[DataSize]; // Звуковые данные<br>
    } DATAChunk;<br><br>
  </code>
  Поля заголовка порции всегда равны следующим значениям:<br>
  <code>
    &nbsp;&nbsp;ChunkType &nbsp;&nbsp; = "DATA"<br>
    &nbsp;&nbsp;ChunkID &nbsp;&nbsp;&nbsp;&nbsp; = "DATA"<br>
    &nbsp;&nbsp;ChunkVer &nbsp;&nbsp;&nbsp; = 0x01<br>
    &nbsp;&nbsp;lenChunkName = 0x00<br>
    &nbsp;&nbsp;ChunkName &nbsp;&nbsp; = ""
  </code>


  <div align="center"><font size=5><strong><br>
    Спецификация формата файлов AIFF-C<br>(Compressed AIFF)<br>
  </strong></font></div>
  Официальную спецификацию можно найти, например,
  <a href="http://www.tsp.ece.mcgill.ca/MMSP/Documents/AudioFormats/AIFF/AIFF.html" target="_blank">здесь</a>.
  Я опишу только структуру файла, особенности и изменения, которые внесла в формат Relic.

  <div align="center"><font size=4><strong><br>
    Структура файла<br>
  </strong></font></div>
  <table width="300" border="1">
    <tr>
      <td width="32%">FORM</td>
      <td width="68%">Порция-контейнер FORM</td>
    </tr>
    <tr>
      <td><div align="center">FVER</div></td>
      <td>Порция Format Version</td>
    </tr>
    <tr>
      <td><div align="center">COMM</div></td>
      <td>Порция Common</td>
    </tr>
    <tr>
      <td><div align="center">SSND</div></td>
      <td>Порция Sound Data</td>
    </tr>
    <tr>
      <td><div align="center">MARK</div></td>
      <td>Порция Marker</td>
    </tr>
  </table>

  <div align="center"><font size=4><strong><br>
    Порции данных<br>
  </strong></font></div>

  <strong>
    Порция SSND (Sound Data)<br>
  </strong>
  Порция содержит аудио данные.<br>
  <code><br>
    typedef struct TSSNDChunk {<br>
    &nbsp;&nbsp;ULONG Offset; &nbsp;&nbsp;&nbsp;&nbsp; // Смещение данных (всегда 0x00)<br>
    &nbsp;&nbsp;ULONG BlockSize; &nbsp; // Размер блока данных (всегда 0x00)<br>
    &nbsp;&nbsp;UINT BlockBitrate; // Размер фрейма в битах<br>
    } SSNDChunk;<br><br>
  </code>
  Поле BlockBitrate существует только в файлах, созданных программами Relic.
  Значение этого поля аналогично полю BlockBitrate порции INFO в FDA файле.

  <strong><br><br>
    Порция MARK (Marker)<br>
  </strong>
  Порция содержит данные, которые определяют, будет ли проигрываться звук в цикле.
  Структура этой порции соответствует официальной спецификации. Структура маркера
  отличается от описанной в спецификации только типом поля MarkerID. Каждый маркер
  определяется следующей структурой:<br>
  <code><br>
    typedef struct TAIFCMarker {<br>
    &nbsp;&nbsp;UINT MarkerID; &nbsp;&nbsp;&nbsp;&nbsp; // Уникальный ID маркера (должен быть >0)<br>
    &nbsp;&nbsp;ULONG Position; &nbsp;&nbsp;&nbsp; // Позиция в данных, на которую указывает маркер<br>
    &nbsp;&nbsp;PSTRING MarkerName; // Имя маркера<br>
    } AIFCMarker;<br><br>
  </code>
  Программы Relic записывают в файл три маркера:<br>
  Begin Loop Marker:<br>
  <code>
    &nbsp;&nbsp;MarkerID &nbsp; = 0x01<br>
    &nbsp;&nbsp;Position &nbsp; = 0x00<br>
    &nbsp;&nbsp;MarkerName = "beg loop"\0<br>
  </code>
  End Loop Marker:<br>
  <code>
    &nbsp;&nbsp;MarkerID &nbsp; = 0x02<br>
    &nbsp;&nbsp;Position &nbsp; = 0xffffffff<br>
    &nbsp;&nbsp;MarkerName = "end loop"\0<br>
  </code>
  Start Offset Marker:<br>
  <code>
    &nbsp;&nbsp;MarkerID &nbsp; = 0x03<br>
    &nbsp;&nbsp;Position &nbsp; = 0x00<br>
    &nbsp;&nbsp;MarkerName = "start offset"\0<br>
  </code>
  При указанных значениях поля Position цикл не работает. Некоторые программы
  Relic при таких значениях вообще не записывают в файл порцию MARK, другие все
  же записывают.<br>

  </div>
  </font>
</body>
</html>
